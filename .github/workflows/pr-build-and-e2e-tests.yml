name: Run tests against PR
on:
    pull_request:
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    login-run:
        name: Daily smoke test on trunk.
        runs-on: ubuntu-20.04
        env:
            API_TEST_REPORT_DIR: ${{ github.workspace }}/api-test-report
            E2E_PLAYWRIGHT: true
        outputs:
            commit_message: ${{ steps.get_commit_message.outputs.commit_message }}
        steps:
            - uses: actions/checkout@v3
              with:
                  ref: e2e/rep-s3-daily # mytodo revert to trunk

            - uses: ./.github/actions/cache-deps
              with:
                  workflow_name: smoke-test-daily
                  workflow_cache: ${{ secrets.WORKFLOW_CACHE }}

            - name: Setup PHP
              if: fromJSON(env.E2E_PLAYWRIGHT) != true
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '7.4'

            - name: Install and Build
              if: fromJSON(env.E2E_PLAYWRIGHT) != true
              uses: ./.github/actions/install-build

            - name: Install PNPM and project dependencies
              if: fromJSON(env.E2E_PLAYWRIGHT)
              env:
                  COMPOSER_NO_DEV: 1
              run: |
                  npm install -g pnpm@^6.24.2
                  pnpm install

            - name: Install Jest
              if: fromJSON(env.E2E_PLAYWRIGHT) != true
              run: npm install -g jest

            - name: Get latest commit message
              id: get_commit_message
              run: |
                  COMMIT_MESSAGE=$(git log --pretty=format:%s -1)
                  echo "::set-output name=commit_message::$COMMIT_MESSAGE"

            - name: Run Puppeteer E2E smoke test.
              if: fromJSON(env.E2E_PLAYWRIGHT) != true
              working-directory: plugins/woocommerce
              env:
                  SMOKE_TEST_URL: ${{ secrets.SMOKE_TEST_URL }}
                  SMOKE_TEST_ADMIN_USER: ${{ secrets.SMOKE_TEST_ADMIN_USER }}
                  SMOKE_TEST_ADMIN_PASSWORD: ${{ secrets.SMOKE_TEST_ADMIN_PASSWORD }}
                  SMOKE_TEST_ADMIN_USER_EMAIL: ${{ secrets.SMOKE_TEST_ADMIN_USER_EMAIL }}
                  SMOKE_TEST_CUSTOMER_USER: ${{ secrets.SMOKE_TEST_CUSTOMER_USER }}
                  SMOKE_TEST_CUSTOMER_PASSWORD: ${{ secrets.SMOKE_TEST_CUSTOMER_PASSWORD }}
                  WC_E2E_SCREENSHOTS: 1
                  E2E_RETEST: 1
                  E2E_SLACK_TOKEN: ${{ secrets.SMOKE_TEST_SLACK_TOKEN }}
                  E2E_SLACK_CHANNEL: ${{ secrets.SMOKE_TEST_SLACK_CHANNEL }}
                  UPDATE_WC: 1
                  DEFAULT_TIMEOUT_OVERRIDE: 120000
              run: |
                  pnpm exec wc-e2e docker:up
                  pnpm exec wc-e2e test:e2e tests/e2e/specs/smoke-tests/update-woocommerce.js
              # pnpm exec wc-e2e test:e2e

            - name: Download and install Chromium
              if: fromJSON(env.E2E_PLAYWRIGHT)
              working-directory: plugins/woocommerce
              run: pnpx playwright install chromium

            - name: Download WooCommerce nightly build zip
              if: fromJSON(env.E2E_PLAYWRIGHT)
              id: nightly-zip
              working-directory: plugins/woocommerce/e2e
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  PLUGIN_DIR: ${{ github.workspace }}/plugins/woocommerce/e2e/plugins
              run: |
                  mkdir $PLUGIN_DIR
                  cd $PLUGIN_DIR
                  gh release download nightly
                  echo "::set-output name=PLUGIN_PATH::$PLUGIN_DIR/woocommerce-trunk-nightly.zip"

            - name: Run Playwright E2E smoke test.
              if: fromJSON(env.E2E_PLAYWRIGHT)
              working-directory: plugins/woocommerce
              env:
                  BASE_URL: ${{ secrets.SMOKE_TEST_URL }}
                  ADMIN_USER: ${{ secrets.SMOKE_TEST_ADMIN_USER }}
                  ADMIN_PASSWORD: ${{ secrets.SMOKE_TEST_ADMIN_PASSWORD }}
                  ADMIN_USER_EMAIL: ${{ secrets.SMOKE_TEST_ADMIN_USER_EMAIL }}
                  CUSTOMER_USER: ${{ secrets.SMOKE_TEST_CUSTOMER_USER }}
                  CUSTOMER_PASSWORD: ${{ secrets.SMOKE_TEST_CUSTOMER_PASSWORD }}
                  UPDATE_WC: true
                  PLUGIN_PATH: ${{ steps.nightly-zip.outputs.PLUGIN_PATH }}
                  DEFAULT_TIMEOUT_OVERRIDE: 120000
              run: |
                  pnpx playwright test e2e/tests/smoke-tests/update-woocommerce.spec.js --config=e2e/playwright.config.js
              # pnpx playwright test --config=e2e/playwright.config.js

            # mytodo remove this
            - name: Archive
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: test-results
                  path: plugins/woocommerce/e2e/test-results
                  if-no-files-found: ignore
                  retention-days: 1

    e2e-tests-run:
        name: Runs E2E tests.
        if: false # mytodo revert
        runs-on: ubuntu-20.04
        outputs:
            E2E_GRAND_TOTAL: ${{ steps.count_e2e_total.outputs.E2E_GRAND_TOTAL }}
        steps:
            - uses: actions/checkout@v3
            
            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo

            - name: Load docker images and start containers.
              working-directory: plugins/woocommerce
              run: pnpm env:test --filter=woocommerce

            - name: Download and install Chromium browser.
              working-directory: plugins/woocommerce
              run: pnpm exec playwright install chromium

            - name: Get total number of Playwright E2E tests to be run.
              id: count_e2e_total
              working-directory: plugins/woocommerce
              run: |
                  TOTAL_STR=$(pnpm exec playwright test --config=tests/e2e-pw/playwright.config.js --list | grep "Total:")
                  NO_PREFIX=${TOTAL_STR#*"Total: "}
                  COUNT=${NO_PREFIX%" tests in"*}
                  echo "::set-output name=E2E_GRAND_TOTAL::$COUNT"

            - name: Run Playwright E2E tests.
              timeout-minutes: 60
              id: run_playwright_e2e_tests
              env:
                USE_WP_ENV: 1
                E2E_MAX_FAILURES: 15
              working-directory: plugins/woocommerce
              run: pnpm exec playwright test --config=tests/e2e-pw/playwright.config.js

            - name: Generate Playwright E2E Test report.
              id: generate_e2e_report
              if: |
                  always() &&
                  (
                    steps.run_playwright_e2e_tests.conclusion != 'cancelled' ||
                    steps.run_playwright_e2e_tests.conclusion != 'skipped' 
                  )
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean e2e/allure-results --output e2e/allure-report

            - name: Archive Playwright E2E test report
              if: |
                  always() &&
                  steps.generate_e2e_report.conclusion == 'success'
              uses: actions/upload-artifact@v3
              with:
                  name: e2e-test-report---pr-${{ github.event.number }}
                  path: |
                      plugins/woocommerce/e2e/allure-results
                      plugins/woocommerce/e2e/allure-report
                  if-no-files-found: ignore
                  retention-days: 5

    api-tests-run:
        name: Runs API tests.
        if: false # mytodo revert
        runs-on: ubuntu-20.04
        env:
            API_TEST_REPORT_DIR: ${{ github.workspace }}/api-test-report
        steps:
            - uses: actions/checkout@v3
            
            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo

            - name: Load docker images and start containers.
              working-directory: plugins/woocommerce
              run: pnpm env:test --filter=woocommerce

            - name: Run Playwright API tests.
              id: run_playwright_api_tests
              working-directory: plugins/woocommerce
              env:
                  BASE_URL: http://localhost:8086
                  USER_KEY: admin
                  USER_SECRET: password
              run: pnpm exec playwright test --config=tests/api-core-tests/playwright.config.js
              
            - name: Generate Playwright API Test report.
              id: generate_api_report
              if: |
                  always() &&
                  (
                    steps.run_playwright_api_tests.conclusion != 'cancelled' ||
                    steps.run_playwright_api_tests.conclusion != 'skipped' 
                  )
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean api-test-report/allure-results --output api-test-report/allure-report
            - name: Archive Playwright API test report
              if: |
                  always() &&
                  steps.generate_api_report.conclusion == 'success'
              uses: actions/upload-artifact@v3
              with:
                  name: api-test-report---pr-${{ github.event.number }}
                  path: |
                      plugins/woocommerce/api-test-report/allure-results
                      plugins/woocommerce/api-test-report/allure-report
                  if-no-files-found: ignore
                  retention-days: 5

    k6-tests-run:
        name: Runs k6 Performance tests
        if: false # mytodo revert
        runs-on: ubuntu-20.04
        steps:
            - uses: actions/checkout@v3
            
            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo

            - name: Load docker images and start containers.
              working-directory: plugins/woocommerce
              run: |
                pnpm env:dev --filter=woocommerce
                pnpm env:performance-init --filter=woocommerce

            - name: Install k6
              run: |
                  curl https://github.com/grafana/k6/releases/download/v0.33.0/k6-v0.33.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1

            - name: Run k6 tests
              run: |
                  ./k6 run plugins/woocommerce/tests/performance/tests/gh-action-pr-requests.js

    test-summary:
        name: Post test results
        if:
            false # mytodo revert
            # always() &&
            # ! github.event.pull_request.head.repo.fork &&
            # (
            #   contains( needs.*.result, 'success' ) ||
            #   contains( needs.*.result, 'failure' )
            # )
        runs-on: ubuntu-20.04
        needs: [api-tests-run, e2e-tests-run]
        env:
            E2E_GRAND_TOTAL: ${{needs.e2e-tests-run.outputs.E2E_GRAND_TOTAL}}
        steps:
            - name: Create dirs
              run: |
                  mkdir -p repo
                  mkdir -p artifacts/api 
                  mkdir -p artifacts/e2e
                  mkdir -p output

            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  path: repo

            - name: Download API test report artifact
              uses: actions/download-artifact@v3
              with:
                  name: api-test-report---pr-${{ github.event.number }}
                  path: artifacts/api

            - name: Download Playwright E2E test report artifact
              uses: actions/download-artifact@v3
              with:
                  name: e2e-test-report---pr-${{ github.event.number }}
                  path: artifacts/e2e

            - name: Prepare test summary
              id: prepare-test-summary
              uses: actions/github-script@v6
              env:
                  API_SUMMARY_PATH: ${{ github.workspace }}/artifacts/api/allure-report/widgets/summary.json
                  E2E_PW_SUMMARY_PATH: ${{ github.workspace }}/artifacts/e2e/allure-report/widgets/summary.json
                  PR_NUMBER: ${{ github.event.number }}
                  SHA: ${{ github.event.pull_request.head.sha }}
              with:
                  result-encoding: string
                  script: |
                      const script = require( './repo/.github/workflows/scripts/prepare-test-summary.js' )
                      return await script( { core } )

            - name: Find PR comment by github-actions[bot]
              uses: peter-evans/find-comment@v2
              id: find-comment
              with:
                  issue-number: ${{ github.event.pull_request.number }}
                  comment-author: 'github-actions[bot]'
                  body-includes: Test Results Summary

            - name: Create or update PR comment
              uses: peter-evans/create-or-update-comment@v2
              with:
                  comment-id: ${{ steps.find-comment.outputs.comment-id }}
                  issue-number: ${{ github.event.pull_request.number }}
                  body: ${{ steps.prepare-test-summary.outputs.result }}
                  edit-mode: replace

    publish-test-reports:
        name: Publish test reports
        # if: |
        #     always() &&
        #     ! github.event.pull_request.head.repo.fork &&
        #     (
        #       contains( needs.*.result, 'success' ) ||
        #       contains( needs.*.result, 'failure' )
        #     )
        if: false # mytodo revert
        runs-on: ubuntu-20.04
        needs: [api-tests-run, e2e-tests-run, k6-tests-run]
        env:
            GITHUB_TOKEN: ${{ secrets.REPORTS_TOKEN }}
            PR_NUMBER: ${{ github.event.number }}
            RUN_ID: ${{ github.run_id }}
            COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
        steps:
            - name: Publish test reports
              env:
                  API_ARTIFACT: api-test-report---pr-${{ github.event.number }}
                  E2E_ARTIFACT: e2e-test-report---pr-${{ github.event.number }}
              run: |
                  gh workflow run publish-test-reports-pr.yml \
                    -f run_id=$RUN_ID \
                    -f api_artifact=$API_ARTIFACT \
                    -f e2e_artifact=$E2E_ARTIFACT \
                    -f pr_number=$PR_NUMBER \
                    -f commit_sha=$COMMIT_SHA \
                    -f s3_root=public \
                    --repo woocommerce/woocommerce-test-reports