name: Smoke test release
on:
    release:
        types: [published]
    workflow_dispatch:
        inputs:
            tag:
                description: 'WooCommerce Release Tag'
                required: true
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true
permissions: {}
env:
    API_WP_LATEST_ARTIFACT: api-wp-latest--run-${{ github.run_number }}
    E2E_WP_LATEST_ARTIFACT: e2e-wp-latest--run-${{ github.run_number }}
    E2E_UPDATE_WC_ARTIFACT: e2e-update-wc--run-${{ github.run_number }}
    K6_ARTIFACT: k6-release--run-${{ github.run_number }}
    FORCE_COLOR: 1

jobs:
    get-tag:
        name: Get WooCommerce release tag
        permissions:
            contents: read
        runs-on: ubuntu-20.04
        outputs:
            tag: ${{ steps.tag.outputs.result }}
            created: ${{ steps.created-at.outputs.created }}
        steps:
            - name: Validate tag
              if: ${{ github.event_name == 'workflow_dispatch' }}
              env:
                  GH_TOKEN: ${{ github.token }}
              run: gh release view "${{ github.event.inputs.tag }}" --repo=woocommerce/woocommerce

            - name: Get tag
              uses: actions/github-script@v5
              id: tag
              with:
                  result-encoding: string
                  script: |
                      console.log( "${{ github.event_name }}" );
                      return "${{ github.event.release.tag_name }}" || "${{ github.event.inputs.tag }}"

            - name: Get 'created-at' of WooCommerce zip
              id: created-at
              env:
                  GH_TOKEN: ${{ github.token }}
              run: echo "created=$(gh release view ${{ steps.tag.outputs.result }} --json assets --jq .assets[0].createdAt --repo woocommerce/woocommerce)" >> $GITHUB_OUTPUT

    e2e-update-wc:
        name: Test WooCommerce update
        runs-on: ubuntu-20.04
        needs: [get-tag]
        permissions:
            contents: read
        env:
            ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-report
            ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-results
        steps:
            - uses: actions/checkout@v3

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install-filters: woocommerce
                  build: false

            - name: Download and install Chromium browser.
              working-directory: plugins/woocommerce
              run: pnpm exec playwright install chromium

            - name: Run 'Update WooCommerce' test.
              working-directory: plugins/woocommerce
              env:
                  ADMIN_PASSWORD: ${{ secrets.RELEASE_TEST_ADMIN_PASSWORD }}
                  ADMIN_USER: ${{ secrets.RELEASE_TEST_ADMIN_USER }}
                  BASE_URL: ${{ secrets.RELEASE_TEST_URL }}
                  CUSTOMER_PASSWORD: ${{ secrets.RELEASE_TEST_CUSTOMER_PASSWORD }}
                  CUSTOMER_USER: ${{ secrets.RELEASE_TEST_CUSTOMER_USER }}
                  DEFAULT_TIMEOUT_OVERRIDE: 120000
                  UPDATE_WC: ${{ needs.get-tag.outputs.tag }}
              run: |
                  pnpm exec playwright test \
                      --config=tests/e2e-pw/daily.playwright.config.js \
                      update-woocommerce.spec.js

            - name: Generate 'Update WooCommerce' test report.
              if: success() || failure()
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

            - name: Configure AWS credentials
              if: success() || failure()
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-region: ${{ secrets.REPORTS_AWS_REGION }}
                  aws-access-key-id: ${{ secrets.REPORTS_AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.REPORTS_AWS_SECRET_ACCESS_KEY }}

            - name: Upload artifact to bucket
              if: success() || failure()
              run: |
                  aws s3 sync ${{ env.ALLURE_RESULTS_DIR }} \
                      ${{ secrets.REPORTS_BUCKET }}/artifacts/${{ github.run_id }}/${{ env.E2E_WP_LATEST_ARTIFACT }}/allure-results \
                      --quiet
                  aws s3 sync ${{ env.ALLURE_REPORT_DIR }} \
                      ${{ secrets.REPORTS_BUCKET }}/artifacts/${{ github.run_id }}/${{ env.E2E_WP_LATEST_ARTIFACT }}/allure-report \
                      --quiet

            - name: Archive 'Update WooCommerce' test report
              if: success() || failure()
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ env.E2E_UPDATE_WC_ARTIFACT }}
                  path: |
                      ${{ env.ALLURE_RESULTS_DIR }}
                      ${{ env.ALLURE_REPORT_DIR }}
                  if-no-files-found: ignore
                  retention-days: 5

    api-wp-latest:
        name: API on WP Latest
        runs-on: ubuntu-20.04
        needs: [e2e-update-wc]
        permissions:
            contents: read
        env:
            ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/api-core-tests/api-test-report/allure-report
            ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/api-core-tests/api-test-report/allure-results
            BASE_URL: ${{ secrets.RELEASE_TEST_URL }}
        steps:
            - uses: actions/checkout@v3

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install-filters: woocommerce
                  build: false

            - name: Run API tests.
              working-directory: plugins/woocommerce
              env:
                  USER_KEY: ${{ secrets.RELEASE_TEST_ADMIN_USER }}
                  USER_SECRET: ${{ secrets.RELEASE_TEST_ADMIN_PASSWORD }}
              run: pnpm exec playwright test --config=tests/api-core-tests/playwright.config.js hello

            - name: Generate API Test report.
              if: success() || failure()
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

            - name: Archive API test report
              if: success() || failure()
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ env.API_WP_LATEST_ARTIFACT }}
                  path: |
                      ${{ env.ALLURE_RESULTS_DIR }}
                      ${{ env.ALLURE_REPORT_DIR }}
                  if-no-files-found: ignore
                  retention-days: 5

            - name: Configure AWS credentials
              if: success() || failure()
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-region: ${{ secrets.REPORTS_AWS_REGION }}
                  aws-access-key-id: ${{ secrets.REPORTS_AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.REPORTS_AWS_SECRET_ACCESS_KEY }}

            - name: Upload artifact to bucket
              if: success() || failure()
              run: |
                  aws s3 cp ${{ env.ALLURE_RESULTS_DIR }} \
                      ${{ secrets.REPORTS_BUCKET }}/artifacts/${{ github.run_id }}/${{ env.API_WP_LATEST_ARTIFACT }}/allure-results \
                      --recursive \
                      --quiet
                  aws s3 cp ${{ env.ALLURE_REPORT_DIR }} \
                      ${{ secrets.REPORTS_BUCKET }}/artifacts/${{ github.run_id }}/${{ env.API_WP_LATEST_ARTIFACT }}/allure-report \
                      --recursive \
                      --quiet

    e2e-wp-latest:
        name: E2E on WP Latest
        runs-on: ubuntu-20.04
        needs: [api-wp-latest]
        permissions:
            contents: read
        env:
            ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-report
            ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/allure-results
        steps:
            - uses: actions/checkout@v3

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install-filters: woocommerce
                  build: false

            - name: Download and install Chromium browser.
              working-directory: plugins/woocommerce
              run: pnpm exec playwright install chromium

            - name: Run E2E tests
              env:
                  ADMIN_PASSWORD: ${{ secrets.RELEASE_TEST_ADMIN_PASSWORD }}
                  ADMIN_USER: ${{ secrets.RELEASE_TEST_ADMIN_USER }}
                  ADMIN_USER_EMAIL: ${{ secrets.RELEASE_TEST_ADMIN_USER_EMAIL }}
                  BASE_URL: ${{ secrets.RELEASE_TEST_URL }}
                  CUSTOMER_PASSWORD: ${{ secrets.RELEASE_TEST_CUSTOMER_PASSWORD }}
                  CUSTOMER_USER: ${{ secrets.RELEASE_TEST_CUSTOMER_USER }}
                  DEFAULT_TIMEOUT_OVERRIDE: 120000
                  E2E_MAX_FAILURES: 25
                  RESET_SITE: true
              timeout-minutes: 60
              working-directory: plugins/woocommerce
              run: pnpm exec playwright test --config=tests/e2e-pw/ignore-plugin-tests.playwright.config.js basic.spec.js

            - name: Download 'e2e-update-wc' artifact
              uses: actions/download-artifact@v3
              with:
                  name: ${{ env.E2E_UPDATE_WC_ARTIFACT }}
                  path: plugins/woocommerce/tmp

            - name: Add allure-results from 'e2e-update-wc'
              working-directory: plugins/woocommerce
              run: cp -r tmp/allure-results tests/e2e-pw/test-results

            - name: Generate E2E Test report.
              if: success() || failure()
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean ${{ env.ALLURE_RESULTS_DIR }} --output ${{ env.ALLURE_REPORT_DIR }}

            - name: Archive E2E test report
              if: success() || failure()
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ env.E2E_WP_LATEST_ARTIFACT }}
                  path: |
                      ${{ env.ALLURE_RESULTS_DIR }}
                      ${{ env.ALLURE_REPORT_DIR }}
                  if-no-files-found: ignore
                  retention-days: 5

            - name: Configure AWS credentials
              if: success() || failure()
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-region: ${{ secrets.REPORTS_AWS_REGION }}
                  aws-access-key-id: ${{ secrets.REPORTS_AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.REPORTS_AWS_SECRET_ACCESS_KEY }}

            - name: Upload artifact to bucket
              if: success() || failure()
              run: |
                  aws s3 sync ${{ env.ALLURE_RESULTS_DIR }} \
                      ${{ secrets.REPORTS_BUCKET }}/artifacts/${{ github.run_id }}/${{ env.E2E_WP_LATEST_ARTIFACT }}/allure-results \
                      --quiet
                  aws s3 sync ${{ env.ALLURE_REPORT_DIR }} \
                      ${{ secrets.REPORTS_BUCKET }}/artifacts/${{ github.run_id }}/${{ env.E2E_WP_LATEST_ARTIFACT }}/allure-report \
                      --quiet

    report-wp-latest:
        name: Publish API & E2E Allure reports on WP Latest
        if: |
            ( success() || failure() ) &&
            ! github.event.pull_request.head.repo.fork
        runs-on: ubuntu-20.04
        permissions:
            contents: read
        needs: [get-tag, e2e-wp-latest]
        steps:
            - name: Publish report on WP Latest
              env:
                  GITHUB_TOKEN: ${{ secrets.REPORTS_TOKEN }}
                  ENV_DESCRIPTION: wp-latest
              run: |
                  gh workflow run publish-test-reports-release.yml \
                    -f created_at="${{ steps.created-at.outputs.created_at }}" \
                    -f run_id=${{ github.run_id }} \
                    -f run_number=${{ github.run_number }} \
                    -f release_tag=${{ needs.get-tag.outputs.tag }} \
                    -f api_artifact="${{ env.API_WP_LATEST_ARTIFACT }}" \
                    -f e2e_artifact="${{ env.E2E_WP_LATEST_ARTIFACT }}" \
                    -f env_description="${{ env.ENV_DESCRIPTION }}" \
                    -f s3_path="public/release/${{ needs.get-tag.outputs.tag }}/${{ env.ENV_DESCRIPTION }}" \
                    --repo woocommerce/woocommerce-test-reports

    get-wp-versions:
        name: Get WP L-1 & L-2 versions
        needs: [get-tag, e2e-update-wc]
        runs-on: ubuntu-20.04
        permissions:
            contents: read
        outputs:
            matrix: ${{ steps.get-versions.outputs.versions }}
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo
              with:
                  install-filters: woocommerce
                  build: false

            - name: Get version numbers
              id: get-versions
              uses: actions/github-script@v6
              with:
                  script: |
                      const { getPreviousTwoVersions } = require('./plugins/woocommerce/tests/e2e-pw/utils/wordpress');
                      const versions = await getPreviousTwoVersions();
                      console.log(versions);
                      core.setOutput('versions', versions);

    test-wp-versions:
        name: Run tests against ${{ matrix.version.description }} (${{ matrix.version.number }})
        runs-on: ubuntu-20.04
        needs: [get-tag, get-wp-versions]
        strategy:
            matrix: ${{ fromJSON(needs.get-wp-versions.outputs.matrix) }}
        env:
            API_ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/api/allure-report
            API_ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/api/allure-results
            API_WP_LATEST_X_ARTIFACT: api-${{ matrix.version.env_description }}--run-${{ github.run_number }}
            E2E_ALLURE_REPORT_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/e2e/allure-report
            E2E_ALLURE_RESULTS_DIR: ${{ github.workspace }}/plugins/woocommerce/tests/e2e-pw/test-results/e2e/allure-results
            E2E_WP_LATEST_X_ARTIFACT: e2e-${{ matrix.version.env_description }}--run-${{ github.run_number }}

        steps:
            - name: Checkout WooCommerce repo
              uses: actions/checkout@v3

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo

            - name: Download and install Chromium browser.
              working-directory: plugins/woocommerce
              run: pnpm exec playwright install chromium

            - name: Launch WP Env
              working-directory: plugins/woocommerce
              run: pnpm run env:test

            - name: Download release zip
              env:
                  GITHUB_TOKEN: ${{ github.token }}
              run: gh release download ${{ github.event.inputs.tag }} --dir tmp

            - name: Replace `plugins/woocommerce` with unzipped woocommerce release build
              run: unzip -d plugins -o tmp/woocommerce.zip

            - name: Downgrade WordPress version to ${{ matrix.version.number }}
              working-directory: plugins/woocommerce
              run: |
                  pnpm exec wp-env run tests-cli "wp core update --version=${{ matrix.version.number }} --force"
                  pnpm exec wp-env run tests-cli "wp core update-db"

            - name: Review environment details
              working-directory: plugins/woocommerce
              run: |
                  pnpm exec wp-env run tests-cli "wp core version"
                  pnpm exec wp-env run tests-cli "wp plugin list"
                  pnpm exec wp-env run tests-cli "wp theme list"
                  pnpm exec wp-env run tests-cli "wp user list"

            - name: Run API tests.
              working-directory: plugins/woocommerce
              env:
                  ALLURE_RESULTS_DIR: ${{ env.API_ALLURE_RESULTS_DIR }}
                  USER_KEY: ${{ secrets.RELEASE_TEST_ADMIN_USER }}
                  USER_SECRET: ${{ secrets.RELEASE_TEST_ADMIN_PASSWORD }}
              run: pnpm exec playwright test --config=tests/api-core-tests/playwright.config.js hello

            - name: Generate API Allure report.
              if: success() || failure()
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean ${{ env.API_ALLURE_RESULTS_DIR }} --output ${{ env.API_ALLURE_REPORT_DIR }}

            - name: Archive API Allure reports
              if: success() || failure()
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ env.API_WP_LATEST_X_ARTIFACT }}
                  path: |
                      ${{ env.API_ALLURE_RESULTS_DIR }}
                      ${{ env.API_ALLURE_REPORT_DIR }}
                  if-no-files-found: ignore
                  retention-days: 5

            - name: Run E2E tests.
              if: success() || failure()
              timeout-minutes: 60
              id: e2e
              env:
                  USE_WP_ENV: 1
                  E2E_MAX_FAILURES: 15
                  FORCE_COLOR: 1
                  ALLURE_RESULTS_DIR: ${{ env.E2E_ALLURE_RESULTS_DIR }}
              working-directory: plugins/woocommerce
              run: pnpm exec playwright test --config=tests/e2e-pw/playwright.config.js basic.spec.js

            - name: Generate E2E Allure report.
              if: success() || failure()
              working-directory: plugins/woocommerce
              run: pnpm exec allure generate --clean ${{ env.E2E_ALLURE_RESULTS_DIR }} --output ${{ env.E2E_ALLURE_REPORT_DIR }}

            - name: Configure AWS credentials
              if: success() || failure()
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-region: ${{ secrets.REPORTS_AWS_REGION }}
                  aws-access-key-id: ${{ secrets.REPORTS_AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.REPORTS_AWS_SECRET_ACCESS_KEY }}

            - name: Upload artifacts to bucket
              if: success() || failure()
              run: |
                  aws s3 sync ${{ env.API_ALLURE_RESULTS_DIR }} \
                      ${{ secrets.REPORTS_BUCKET }}/artifacts/${{ github.run_id }}/${{ env.API_WP_LATEST_X_ARTIFACT }}/allure-results \
                      --quiet
                  aws s3 sync ${{ env.API_ALLURE_REPORT_DIR }} \
                      ${{ secrets.REPORTS_BUCKET }}/artifacts/${{ github.run_id }}/${{ env.API_WP_LATEST_X_ARTIFACT }}/allure-report \
                      --quiet
                  aws s3 sync ${{ env.E2E_ALLURE_RESULTS_DIR }} \
                      ${{ secrets.REPORTS_BUCKET }}/artifacts/${{ github.run_id }}/${{ env.E2E_WP_LATEST_X_ARTIFACT }}/allure-results \
                      --quiet
                  aws s3 sync ${{ env.E2E_ALLURE_REPORT_DIR }} \
                      ${{ secrets.REPORTS_BUCKET }}/artifacts/${{ github.run_id }}/${{ env.E2E_WP_LATEST_X_ARTIFACT }}/allure-report \
                      --quiet

            - name: Archive E2E Allure reports
              if: success() || failure()
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ env.E2E_WP_LATEST_X_ARTIFACT }}
                  path: |
                      ${{ env.E2E_ALLURE_RESULTS_DIR }}
                      ${{ env.E2E_ALLURE_REPORT_DIR }}
                  if-no-files-found: ignore
                  retention-days: 5

            - name: Publish report
              if: success() || failure()
              env:
                  GITHUB_TOKEN: ${{ secrets.REPORTS_TOKEN }}
                  ENV_DESCRIPTION: ${{ matrix.version.env_description }}
              run: |
                  gh workflow run publish-test-reports-release.yml \
                    -f created_at="${{ needs.get-tag.outputs.created }}" \
                    -f run_id=${{ github.run_id }} \
                    -f run_number=${{ github.run_number }} \
                    -f release_tag=${{ needs.get-tag.outputs.tag }} \
                    -f api_artifact="${{ env.API_WP_LATEST_X_ARTIFACT }}" \
                    -f e2e_artifact="${{ env.E2E_WP_LATEST_X_ARTIFACT }}" \
                    -f env_description="${{ env.ENV_DESCRIPTION }}" \
                    -f s3_path="public/release/${{ needs.get-tag.outputs.tag }}/${{ env.ENV_DESCRIPTION }}" \
                    --repo woocommerce/woocommerce-test-reports
