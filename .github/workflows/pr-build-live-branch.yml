name: Build PR Live Branch
on:
    pull_request:
        paths-ignore:
            - '.github/**'
            - 'docs/**'
            - 'packages/php/**'
            - 'tools/**'
            - '**/changelog/**'
            - '**/tests/**'
            - '**/*.md'

concurrency:
    # Cancel concurrent jobs on pull_request but not push, by including the run_id in the concurrency group for the latter.
    group: build-${{ github.event_name == 'push' && github.run_id || 'pr' }}-${{ github.ref }}
    cancel-in-progress: true

permissions: {}

jobs:
    build:
        if: github.repository_owner == 'woocommerce' && github.event.pull_request.user.login != 'github-actions[bot]'
        runs-on: ubuntu-20.04
        permissions:
            contents: read
        steps:
            - uses: actions/checkout@v3

            - name: Get current version
              id: version
              uses: actions/github-script@v6.3.3
              with:
                  script:
                      const { getVersion } = require( './.github/workflows/scripts/get-plugin-version' );
                      const version = await getVersion( 'woocommerce' );
                      core.setOutput( 'version', version );

            - name: Setup WooCommerce Monorepo
              uses: ./.github/actions/setup-woocommerce-monorepo

            - name: Prepare plugin zips
              id: prepare
              env:
                  CURRENT_VERSION: ${{ steps.version.outputs.version }}
                  # Build with experimental blocks.
                  WOOCOMMERCE_BLOCKS_PHASE: 3
              run: |

                  # Current version must compare greather than any previously used current version for this PR.
                  # Assume GH run IDs are monotonic.
                  VERSUFFIX="${GITHUB_RUN_ID}-g$(git rev-parse --short HEAD)"

                  CURRENT_VERSION="$CURRENT_VERSION-$VERSUFFIX"

                  sed -i -e 's/Version: .*$/Version: '"$CURRENT_VERSION"'/' "$GITHUB_WORKSPACE/plugins/woocommerce/woocommerce.php"
                  echo "$CURRENT_VERSION" > "$GITHUB_WORKSPACE/plugins/woocommerce/version.txt"

                  cd "$GITHUB_WORKSPACE/plugins/woocommerce"
                  bash bin/build-zip.sh

                  mkdir "$GITHUB_WORKSPACE/zips"
                  cp "$GITHUB_WORKSPACE/plugins/woocommerce/woocommerce.zip" "$GITHUB_WORKSPACE/zips/woocommerce.zip"
                  cd "$GITHUB_WORKSPACE/zips"
                  unzip woocommerce.zip
                  rm woocommerce.zip
                  mv woocommerce woocommerce-dev
                  zip -q -r "woocommerce-dev.zip" "woocommerce-dev/"
                  rm -fR "$GITHUB_WORKSPACE/zips/woocommerce-dev"

                  # Plugin data is passed as a JSON object.
                  PLUGIN_DATA="{}"          
                  PLUGIN_DATA=$( jq -c --arg slug "woocommerce" --arg ver "$CURRENT_VERSION" '.[ $slug ] = { version: $ver }' <<<"$PLUGIN_DATA" )
                  echo "plugin-data=$PLUGIN_DATA" >> $GITHUB_OUTPUT

            - name: Create plugins artifact
              id: create-plugin-artifact
              uses: actions/upload-artifact@v4
              if: steps.prepare.outputs.plugin-data != '{}'
              with:
                  name: plugins
                  path: zips

            - name: Inform Beta Download webhook
              if: steps.prepare.outputs.plugin-data != '{}'
              env:
                  SECRET: ${{ secrets.WOOBETA_SECRET }}
                  PLUGIN_DATA: ${{ steps.prepare.outputs.plugin-data }}
                  PR: ${{ github.event.number }}
              run: |
                  curl -v --fail -L \
                    --url "https://betadownload.jetpack.me/gh-action.php?run_id=$GITHUB_RUN_ID&pr=$PR&commit=$GITHUB_SHA" \
                    --form-string "repo=$GITHUB_REPOSITORY" \
                    --form-string "branch=${GITHUB_REF#refs/heads/}" \
                    --form-string "plugins=$PLUGIN_DATA" \
                    --form-string "secret=$SECRET"

            - name: Comment on PR with WordPress Playground details
              uses: actions/github-script@v7
              if: steps.prepare.outputs.plugin-data != '{}'
              with:
                  script: |
                      const {generateWordpressPlaygroundBlueprint} = require('./.github/workflows/scripts/genereate-wp-playground-blueprint');
                      const defaultSchema = generateWordpressPlaygroundBlueprint('${{ steps.create-plugin-artifact.outputs.artifact-url }}');

                      const url = `https://playground.wordpress.net/#${encodeURIComponent(JSON.stringify(defaultSchema))}`;

                      const commentInfo = {
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number,
                      };

                      const comments = ( await github.rest.issues.listComments( commentInfo ) ).data;

                      for ( const currentComment of comments ) {
                        if ( currentComment.user.type === 'Bot' && currentComment.body.includes( 'Test using WordPress Playground' ) ) {
                            return;
                        }
                      }

                      commentInfo.body = `## Test using WordPress Playground
                      The changes in this pull request can previewed and tested using a [WordPress Playground](https://developer.wordpress.org/playground/) instance.
                      [WordPress Playground](https://developer.wordpress.org/playground/) is an experimental project that creates a full WordPress instance entirely within the browser.

                      ### Some things to be aware of
                      - The Plugin and Theme Directories cannot be accessed within Playground.
                      - All changes will be lost when closing a tab with a Playground instance.
                      - All changes will be lost when refreshing the page.
                      - A fresh instance is created each time the link below is clicked.
                      - Every time this pull request is updated, a new ZIP file containing all changes is created. If changes are not reflected in the Playground instance, it's possible that the most recent build failed, or has not completed. Check the [list of workflow runs to be sure](
                      it's possible that the most recent build failed, or has not completed. Check the [list of workflow runs to be sure](https://github.com/woocommerce/woocommerce/actions/workflows/build-live-branch.yml).

                      For more details about these limitations and more, check out the [Limitations page](https://wordpress.github.io/wordpress-playground/limitations/) in the WordPress Playground documentation.

                      [Test this pull request with WordPress Playground](https://playground.wordpress.net/#${defaultSchema}).
                      `;

                      github.rest.issues.createComment( commentInfo );
