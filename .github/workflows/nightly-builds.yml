name: Nightly builds
on:
  schedule:
    - cron: '0 0 * * *' # Run at 12 AM UTC.
  workflow_dispatch:

env:
  SOURCE_REF: trunk
  TARGET_REF: nightly
  RELEASE_ID: 25945111

permissions: { }

jobs:
  build:
    if: github.repository_owner == 'woocommerce'
    name: Nightly builds

    runs-on: ubuntu-20.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.SOURCE_REF }}

      - name: Setup WooCommerce Monorepo
        uses: ./.github/actions/setup-woocommerce-monorepo

#      - name: Build zip
#        working-directory: plugins/woocommerce
#        run: bash bin/build-zip.sh
#
#      - name: Upload nightly build
#        uses: WebFreak001/deploy-nightly@d147b5dbd2cb8245d2b5f83a41f5ebe9957575b4
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.RELEASE_ID }}/assets{?name,label}
#          release_id: ${{ env.RELEASE_ID }}
#          asset_path: plugins/woocommerce/woocommerce.zip
#          asset_name: woocommerce-${{ env.SOURCE_REF }}-nightly.zip
#          asset_content_type: application/zip
#          max_releases: 1

      # Update the release body so that the release edited trigger is fired. ci.yml will run tests on this event.
      - name: Update nightly release body
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.FINE_GRAINED_TOKEN_ACTIONS }}
          script: |
            await github.rest.repos.updateRelease({
              ...context.repo,
              release_id: process.env.RELEASE_ID,
              body: `Nightly build auto generated. Updated at ${ new Date().toUTCString() }.`
            });

      - name: Update nightly tag commit ref
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.FINE_GRAINED_TOKEN_ACTIONS }}
          script: |
            const sourceRef = process.env.SOURCE_REF;
            const targetRef = process.env.TARGET_REF;
            const branchData = await github.rest.repos.getBranch({
              ...context.repo,
              branch: sourceRef,
            });
            
            await github.rest.git.updateRef({
              ...context.repo,
              ref: `tags/${ targetRef }`,
              sha: branchData.data.commit.sha,
            });
