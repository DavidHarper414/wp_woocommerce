name: Send a Slack notification when a PR contains rest api changes

on:
  pull_request_target:
    types: [labeled]

permissions: {}

jobs:
  send-slack-notification-when-pr-contains-rest-api-changes:
    if: "${{ github.event.label.name == 'contains: rest api change' && (github.event.pull_request.state == 'open' || github.event.pull_request.merged) }}"
    runs-on: ubuntu-20.04
    steps:
      - name: Wait 1 minutes for other labelling jobs to finish
        run: sleep 1m
        shell: bash

      - name: Calculate test date
        id: calculate_date
        run: |
          #!/bin/bash
          
          # Get the day of the week of the merged PR (0 for Sunday, 1 for Monday, etc.)
          MERGE_DAY_OF_WEEK=$(date -u -d "${{ github.event.pull_request.merged_at }}" +"%u")
          
          # Calculate days until the next Thursday after the merge
          # If the merge is on Thursday, this will give 7 (i.e., next week's Thursday)
          DAYS_UNTIL_NEXT_THURSDAY=$(( (4 + 7 - MERGE_DAY_OF_WEEK) % 7 ))
          
          # If DAYS_UNTIL_NEXT_THURSDAY is 0, the merge was on a Thursday, so we set it to 7 to get the next Thursday
          if [ $DAYS_UNTIL_NEXT_THURSDAY -eq 0 ]; then
            DAYS_UNTIL_NEXT_THURSDAY=7
          fi
          
          # Calculate the date for the next Thursday after the merge
          THURSDAY_AFTER_MERGE=$(date -u -d "${{ github.event.pull_request.merged_at }} + $DAYS_UNTIL_NEXT_THURSDAY days" +"%Y-%m-%d")
          WOOAF_RELEASE_DATE=$(date -u -d "${THURSDAY_AFTER_MERGE} + 5 days" +"%Y-%m-%d")
          TEST_DATE_MESSAGE="Thursday, $THURSDAY_AFTER_MERGE. (Targeting release on $WOOAF_RELEASE_DATE)"
          echo "TEST_DATE_MESSAGE=${TEST_DATE_MESSAGE}" >> $GITHUB_ENV

      - name: Determine Milestone Date
        id: get_milestone_date
        run: |
          #!/bin/bash
          
          MILESTONE_TITLE="${{ github.event.pull_request.milestone.title }}"
          MILESTONE_DATE="Undefined"
          
          # Mapping of milestone titles to release dates
          declare -A MILESTONE_DATES
          MILESTONE_DATES=(
            ["8.0.0"]="2023-08-08"
            ["8.1.0"]="2023-09-12"
            ["8.2.0"]="2023-10-10"
            ["8.3.0"]="2023-11-14"
            ["8.4.0"]="2023-12-12"
            ["8.5.0"]="2024-01-09"
            ["8.6.0"]="2024-02-13"
            ["8.7.0"]="2024-03-12"
            ["8.8.0"]="2024-04-09"
            ["8.9.0"]="2024-05-14"
            ["9.0.0"]="2024-06-11"
          )
          
          # Check if the milestone title exists in our predefined list and get the date
          if [[ -v "MILESTONE_DATES[${MILESTONE_TITLE}]" ]]; then
            MILESTONE_DATE=${MILESTONE_DATES[${MILESTONE_TITLE}]}
          fi
          
          # Export for later steps
          echo "MILESTONE_DATE=${MILESTONE_DATE}" >> $GITHUB_ENV

          # Output the operating system type
          echo "Operating System Type: $OSTYPE"
          
          # Function to calculate the second Tuesday of the given month and year
          calculate_second_tuesday() {
            year=$1
            month=$2
            # Check OS and adjust `date` command accordingly
            if [[ "$OSTYPE" == "darwin"* ]]; then
              echo "macOS"
              # macOS version (BSD date)
              # Find the first Tuesday of the month
              first_of_month="$year-$month-01"
              day_of_week=$(date -j -f "%Y-%m-%d" "$first_of_month" "+%u")
              offset_to_first_tuesday=$(( (9 - day_of_week) % 7 ))
              first_tuesday=$(date -j -v+"$offset_to_first_tuesday"d -f "%Y-%m-%d" "$first_of_month" "+%Y-%m-%d")
              # Calculate the second Tuesday by adding 7 days to the first Tuesday
              second_tuesday=$(date -j -v+7d -f "%Y-%m-%d" "$first_tuesday" "+%Y-%m-%d")
            else
              echo "Linux"
              # Linux version (GNU date)
              first_of_month="$year-$month-01"
              day_of_week=$(date -d "$first_of_month" "+%u")
              offset_to_first_tuesday=$(( (9 - day_of_week) % 7 ))
              first_tuesday=$(date -d "$first_of_month +$offset_to_first_tuesday days" "+%Y-%m-%d")
              # Calculate the second Tuesday by adding 7 days
              second_tuesday=$(date -d "$first_tuesday +7 days" "+%Y-%m-%d")
            fi
            echo $second_tuesday
          }
          
          # Initialize the starting version and date
          initial_year=2024
          initial_month=6  # June
          versions_to_calculate=12
          
          for (( i=0; i<versions_to_calculate; i++ )); do
            # Calculate year and month offset
            offset_year=$(( (initial_month + i - 1) / 12 ))
            current_year=$(( initial_year + offset_year ))
            current_month=$(( (initial_month + i - 1) % 12 + 1 ))
          
            # Format current month correctly
            current_month_formatted=$(printf "%02d" $current_month)
          
            # Calculate the release date
            release_date=$(calculate_second_tuesday $current_year $current_month_formatted)
          
            # Calculate the version
            version_major=$((9 + offset_year))
            version_minor=$((i % 12))
            version="$version_major.$version_minor.0"
          
            echo "Version $version will be released on $release_date"
          done

      # Notify Slack Step
      - name: Notify Slack
        uses: archive/github-actions-slack@d9dae40827adf93bddf939db6552d1e392259d7d
        id: notify
        with:
            slack-bot-user-oauth-access-token: ${{ secrets.TEST_ASSISTANCE_BOT_TOKEN }}
            slack-channel: ${{ secrets.WOO_CORE_REST_API_CHANGES_SLACK_CHANNEL }}
            slack-text: |
                <${{ github.event.pull_request.html_url }}|${{ github.event.pull_request.title }}>
                *Labels:* ${{ join(github.event.pull_request.labels.*.name, ', ') }}
                *Monthly Release Milestone:* <${{ github.event.pull_request.milestone.html_url }}|${{ github.event.pull_request.milestone.title }}> (Release Date: ${{ env.MILESTONE_DATE }})
                *WooAF (weekly) Timeline: this PR can be tested from:* ${{ env.TEST_DATE_MESSAGE }}
                Please visit the <#${{ secrets.WOO_CORE_RELEASES_SLACK_CHANNEL }}> to obtain the latest WooAF build for testing.
            slack-optional-unfurl_links: false
            slack-optional-unfurl_media: false

