name: 'CI'
on:
  pull_request:
  push:
    branches:
      - 'trunk'
      - 'release/*'
  release:
    types: [ published, edited ]
  workflow_call:
    inputs:
      trigger:
        description: 'Type of run to trigger. E.g. daily-e2e, release-checks, etc.'
        required: true
        default: 'default'
        type: string

concurrency:
  # Cancel concurrent jobs but not for push event. For push use the run_id to have a unique group.
  group: ci-${{ github.event_name == 'push' && github.run_id || github.event_name }}-${{ github.ref }}-${{ inputs.trigger }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1

jobs:
  project-jobs:
    # Since this is a monorepo, not every pull request or change is going to impact every project.
    # Instead of running CI tasks on all projects indiscriminately, we use a command to detect
    # which projects have changed and what kind of change occurred. This lets us build the
    # matrices that we can use to run CI tasks only on the projects that need them.
    name: 'Build Project Jobs'
    runs-on: 'ubuntu-20.04'
    outputs:
      test-jobs: ${{ steps.project-jobs.outputs.test-jobs }}
    steps:
      - uses: 'actions/checkout@v4'
        name: 'Checkout'
        with:
          # If 'base_ref' is available, the 'Build Matrix' step requires non-shallow git-history to identify changed files.
          fetch-depth: ${{ ( ( github.base_ref && '0' ) || '1' ) }}
      - name: 'Setup PNPM'
        uses: 'pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d'
      - uses: actions/github-script@v7
        name: 'Build Matrix'
        id: 'project-jobs'
        with:
          script: |
            // Intended behaviour of the jobs generation:
            // - PRs: run CI jobs aiming PRs and filter out jobs based on the content changes
            // - Pushes: run CI jobs aiming pushes without filtering based on the content changes
            
            // github.base_ref is only available for pull_request events
            let baseRef = ${{ toJson( github.base_ref ) }};
            if ( baseRef ) {
              baseRef = `--base-ref origin/${ baseRef }`;
            }
            
            let githubEvent = ${{ toJson( github.event_name ) }};
            
            const refType = ${{ toJson( github.ref_type ) }};
            const refName = ${{ toJson( github.ref_name ) }};
            
            if ( refType === 'tag' && refName !== 'nightly' ) {
              githubEvent = 'release-checks';
            }
            
            if ( refType === 'tag' && refName === 'nightly' ) {
              githubEvent = 'nightly-checks';
            }
            
            let trigger = ${{ toJson( inputs.trigger ) }};
            if ( trigger ) {
              githubEvent = trigger;
            }
            
            // `pre-release` should trigger `release-checks`, but without a 'tag' ref. 
            // This will run all release-checks against the branch the workflow targeted, instead of a release artifact.
            if ( trigger === 'pre-release' ) {
              githubEvent = 'release-checks';
            }
            
            const child_process = require( 'node:child_process' );
            child_process.execSync( `pnpm utils ci-jobs ${ baseRef } --event ${ githubEvent }` );

  project-test-jobs:
    name: "${{ matrix.name }}"
    runs-on: 'ubuntu-20.04'
    needs: 'project-jobs'
    if: ${{ needs.project-jobs.outputs.test-jobs != '[]' }}
    env: ${{ matrix.testEnv.envVars }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON( needs.project-jobs.outputs.test-jobs ) }}
    steps:
      - uses: 'actions/checkout@v4'
        name: 'Checkout'

      - uses: './.github/actions/setup-woocommerce-monorepo'
        name: 'Install Monorepo'
        id: 'install-monorepo'
        with:
          install: '${{ matrix.projectName }}...'
          build: ${{ ( github.ref_type == 'tag' && 'false' ) || matrix.projectName }}
          build-type: ${{ ( matrix.testType == 'unit:php' && 'backend' ) || 'full' }}
          pull-playwright-cache: false
          pull-package-deps: '${{ matrix.projectName }}'

      - name: 'Update wp-env config'
        if: ${{ github.ref_type == 'tag' }}
        env:
          RELEASE_TAG: ${{ github.ref_name }}
          ARTIFACT_NAME: ${{ github.ref_name == 'nightly' && 'woocommerce-trunk-nightly.zip' || 'woocommerce.zip' }}
          # band-aid to get the path to wp-env.json for blocks e2e tests, until they're migrated to plugins/woocommerce
          WP_ENV_CONFIG_PATH: ${{ github.workspace }}/${{ matrix.testEnv.start == 'env:start:blocks' && 'plugins/woocommerce-blocks' || matrix.projectPath  }}
        run: node .github/workflows/scripts/override-wp-env-plugins.js

      - name: 'Start Test Environment'
        id: 'prepare-test-environment'
        if: ${{ matrix.testEnv.shouldCreate }}
        env: ${{ matrix.testEnv.envVars }}
        run: 'pnpm --filter="${{ matrix.projectName }}" ${{ matrix.testEnv.start }}'

      - name: 'Determine BuildKite Analytics Message'
        env:
          HEAD_COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            MESSAGE=`echo "$HEAD_COMMIT_MESSAGE" | head -1`
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            MESSAGE="$PR_TITLE"
          else
            MESSAGE="${{ github.event_name }}"
          fi
          echo "BUILDKITE_ANALYTICS_MESSAGE=$MESSAGE" >> "$GITHUB_ENV"
        shell: bash

      - name: 'Resolve artifacts path'
        if: ${{ always() && matrix.report.resultsPath != '' }}
        # Blocks e2e use a relative path which is not supported by actions/upload-artifact@v4
        # https://github.com/actions/upload-artifact/issues/176
        env:
          ARTIFACTS_PATH: '${{ matrix.projectPath }}/${{ matrix.report.resultsPath }}'
        run: |
          # first runs will probably not have the directory, so we need to create it so that realpath doesn't fail
          mkdir -p $ARTIFACTS_PATH
          echo "ARTIFACTS_PATH=$(realpath $ARTIFACTS_PATH)" >> $GITHUB_ENV

      - name: 'Run tests (${{ matrix.testType }})'
        env:
          E2E_ENV_KEY: ${{ secrets.E2E_ENV_KEY }}
          BUILDKITE_ANALYTICS_TOKEN: ${{ secrets.BUILDKITE_CORE_E2E_TOKEN }}
          CODEVITALS_PROJECT_TOKEN: ${{ secrets.CODEVITALS_PROJECT_TOKEN }} # required by Metrics tests
        run: |
          # Run the tests
          pnpm --filter="${{ matrix.projectName }}" ${{ matrix.command }}
