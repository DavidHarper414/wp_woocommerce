name: 'List inactive Kirigami & Origami issues'
on:
    workflow_dispatch:
        inputs:
            days:
                description: 'Number of days without activity'
                required: true
                default: '30'
                type: string

permissions:
    issues: read

jobs:
    list-issues:
        runs-on: ubuntu-latest
        steps:
            - name: List inactive issues
              uses: actions/github-script@v7
              with:
                  script: |
                      const daysThreshold = parseInt(context.payload.inputs.days);
                      const thresholdDate = new Date();
                      thresholdDate.setDate(thresholdDate.getDate() - daysThreshold);
                      
                      const issues = await github.paginate(github.rest.issues.listForRepo, {
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        state: 'open',
                        labels: 'team: Kirigami & Origami',
                        per_page: 100
                      });
                      
                      console.log(`Showing issues with no activity for ${daysThreshold}+ days\n`);
                      
                      const inactiveIssues = issues
                        .filter(issue => new Date(issue.updated_at) < thresholdDate)
                        .filter(issue => !issue.labels.some(label => label.name.startsWith('priority:')));

                      // Group issues by focus
                      const focusGroups = new Map();
                      focusGroups.set('no-focus', { name: 'No Focus Label', bugs: [], other: new Map() });
                      
                      for (const issue of inactiveIssues) {
                          const focusLabel = issue.labels.find(label => label.name.startsWith('focus:'));
                          const focusName = focusLabel ? focusLabel.name : 'no-focus';
                          
                          if (!focusGroups.has(focusName)) {
                              focusGroups.set(focusName, { name: focusLabel.name, bugs: [], other: new Map() });
                          }
                          
                          const group = focusGroups.get(focusName);
                          
                          // Check if it's a bug
                          if (issue.labels.some(label => label.name === 'type: bug')) {
                              group.bugs.push(issue);
                              continue;
                          }
                          
                          // Handle other type labels
                          const typeLabels = issue.labels.filter(label => label.name.startsWith('type:'));
                          if (typeLabels.length > 0) {
                              typeLabels.forEach(typeLabel => {
                                  if (!group.other.has(typeLabel.name)) {
                                      group.other.set(typeLabel.name, []);
                                  }
                                  group.other.get(typeLabel.name).push(issue);
                              });
                          } else {
                              if (!group.other.has('no-type')) {
                                  group.other.set('no-type', []);
                              }
                              group.other.get('no-type').push(issue);
                          }
                      }
                      
                      console.log(`Found ${inactiveIssues.length} inactive issues:\n`);
                      
                      // Output grouped issues
                      for (const [focusName, group] of focusGroups) {
                          if (group.bugs.length === 0 && group.other.size === 0) continue;
                          
                          console.log(`# ${group.name}`);
                          
                          if (group.bugs.length > 0) {
                              console.log('\n## Bugs\n');
                              group.bugs.forEach(issue => {
                                  console.log(`#${issue.number} - ${issue.title}`);
                                  console.log(`Last updated: ${new Date(issue.updated_at).toISOString()}`);
                                  console.log(`URL: https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${issue.number}`);
                                  console.log(`Labels: ${issue.labels.map(l => l.name).join(', ')}\n`);
                              });
                          }
                          
                          for (const [typeName, typeIssues] of group.other) {
                              if (typeIssues.length > 0) {
                                  console.log(`\n## ${typeName}\n`);
                                  typeIssues.forEach(issue => {
                                      console.log(`#${issue.number} - ${issue.title}`);
                                      console.log(`Last updated: ${new Date(issue.updated_at).toISOString()}`);
                                      console.log(`URL: https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${issue.number}`);
                                      console.log(`Labels: ${issue.labels.map(l => l.name).join(', ')}\n`);
                                  });
                              }
                          }
                      }
