<?php
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * WC Order Data Store Interface
 *
 * Functions that must be defined by order store classes.
 *
 * @version  2.7.0
 * @category Interface
 * @author   WooThemes
 */
interface WC_Order_Data_Store_Interface {
	/**
	 * Get amount already refunded.
	 *
	 * @param  WC_Order
	 * @return string
	 */
	public function get_total_refunded( $order );

	/**
	 * Get the total tax refunded.
	 *
	 * @param  WC_Order
	 * @return float
	 */
	public function get_total_tax_refunded( $order );

	/**
	 * Get the total shipping refunded.
	 *
	 * @param  WC_Order
	 * @return float
	 */
	public function get_total_shipping_refunded( $order );

	/**
	 * Finds an Order ID based on an order key.
	 *
	 * @param string $order_key An order key has generated by
	 * @return int The ID of an order, or 0 if the order could not be found
	 */
	public function get_order_id_by_order_key( $order_key );

	/**
	 * Return count of orders with type.
	 * @param  string $type
	 * @return int
	 */
	public function get_order_count( $type );

	/**
	 * Get all orders matching the passed in args.
	 *
	 * @see    wc_get_orders()
	 * @param  array $args
	 * @return array of orders
	 */
	public function get_orders( $args = array() );

	/**
	 * Get unpaid orders after a certain date,
	 * @param  int timestamp $date
	 * @return array
	 */
	public function get_unpaid_orders( $date );

	/**
	 * Search order data for a term and return ids.
	 * @param  string $term
	 * @return array of ids
	 */
	public function search_orders_by_term( $term );

	/**
	 * Search orders.
	 *
	 * Run complex searches based on the props passed.
	 *
	 * This function should handle all props supported by WC_Order/Abstract WC_Order.
	 * (see the data array in WC_Order & Abstract WC_Order or the CPT `get_prop_mappings`
	 * for an example of these.
	 *
	 * Anything that is not a valid prop should still be passed along, and assumed a custom field supported
	 * by an extension.
	 *
	 * Example:
	 * ->search( array( 'parent_id' => 2, 'customer_id' => 1, 'test_field' => 5 ) )
	 *
	 * parent_id and customer_id are both props and are searched according to the logic
	 * of the datastore. test_field is not a prop, but the datastore can handle it
	 * as custom data.
	 *
	 * When implementing a search engine, your $props code should be able to handle the following:
	 * $props = array(
	 *     'customer_id' => 1, // Simple direct searching
	 *	   'customer_id' => array( 'value' => 1', 'compare' => '!= ' ), // Comparison operators. See what WP_Query supports to see valid operators. Default for simple searching is =.
	 * );
	 *
	 * $args = array(
	 *     'limit'    => 5, // Limit clause
	 *     'offset'   => 1, // Offset clause
	 *     'relation' => 'OR', // OR or AND relation
	 *     'return'   => 'objects', // ids or objects (return an array of IDs or an array of order objects)
	 * );
	 *
	 * @param array $args Arguments to use for the search query.
	 * @param string $return_type Return IDs or Objects. default: ids
	 * @return array
	 */
	 public function search( $props, $args );

	/**
	 * Gets information about whether permissions were generated yet.
	 * @param WC_Order $order
	 * @return bool
	 */
	public function get_download_permissions_granted( $order );

	/**
	 * Stores information about whether permissions were generated yet.
	 * @param WC_Order $order
	 * @param bool $set
	 */
	public function set_download_permissions_granted( $order, $set );

	/**
	 * Gets information about whether sales were recorded.
	 * @param WC_Order $order
	 * @return bool
	 */
	public function get_recorded_sales( $order );

	/**
	 * Stores information about whether sales were recorded.
	 * @param WC_Order $order
	 * @param bool $set
	 */
	public function set_recorded_sales( $order, $set );

	/**
	 * Gets information about whether coupon counts were updated.
	 * @param WC_Order $order
	 * @return bool
	 */
	public function get_recorded_coupon_usage_counts( $order );

	/**
	 * Stores information about whether coupon counts were updated.
	 * @param WC_Order $order
	 * @param bool $set
	 */
	public function set_recorded_coupon_usage_counts( $order, $set );
}
