<?php
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * WC Order Data Store Interface
 *
 * Functions that must be defined by order store classes.
 *
 * @version  2.7.0
 * @category Interface
 * @author   WooThemes
 */
interface WC_Order_Data_Store_Interface {
	/**
	 * Get amount already refunded.
	 *
	 * @param  WC_Order
	 * @return string
	 */
	public function get_total_refunded( $order );

	/**
	 * Get the total tax refunded.
	 *
	 * @param  WC_Order
	 * @return float
	 */
	public function get_total_tax_refunded( $order );

	/**
	 * Get the total shipping refunded.
	 *
	 * @param  WC_Order
	 * @return float
	 */
	public function get_total_shipping_refunded( $order );

	/**
	 * Finds an Order ID based on an order key.
	 *
	 * @param string $order_key An order key has generated by
	 * @return int The ID of an order, or 0 if the order could not be found
	 */
	public function get_order_id_by_order_key( $order_key );

	/**
	 * Return count of orders with type.
	 * @param  string $type
	 * @return int
	 */
	public function get_order_count( $type );

	/**
	 * Get all orders matching the passed in args.
	 *
	 * @see    wc_get_orders()
	 * @param  array $args
	 * @return array of orders
	 */
	public function get_orders( $args = array() );

	/**
	 * Get unpaid orders after a certain date,
	 * @param  int timestamp $date
	 * @return array
	 */
	public function get_unpaid_orders( $date );

	/**
	 * Search order data for a term and return ids.
	 * @param  string $term
	 * @return array of ids
	 */
	public function search_orders_by_term( $term );

	/**
	 * Search orders.
	 *
	 * Any args passed to the search function are used to
	 * build a complex query. For example, a CPT implementation
	 * searches the posts table and postmeta tables using WP_Query,
	 * but you could also override the datastore and pass searches to
	 * another engine.
	 *
	 * This function should handle all props supported by WC_Order/Abstract WC_Order.
	 * Look at the data property of WC_Order and Abstract WC_Order or the CPT data
	 * store's example `get_prop_mappings` for how to support all of these.
	 * Anything passed to $args that is NOT a data prop, should be passed so the
	 * data store can treat it as custom data. In the CPT implementation this is
	 * treated as custom post meta.
	 *
	 * Example:
	 * ->search( array( 'parent_id' => 2, 'customer_id' => 1, 'test_field' => 5 ) )
	 *
	 * parent_id and customer_id are both props and are searched according to the logic
	 * of the datastore. test_field is not a prop, but the datastore should handle it
	 * as custom data. The CPT will search postmeta.
	 * @todo this explanation should be edited and posted as part of the dev docs -- putting it here for now to explain the PR POC.
	 *
	 * @param array $args Arguments to use for the search query.
	 * @param string $return_type Return IDs or Objects. default: ids
	 * @return array
	 */
	 public function search( $args, $return_type = 'ids' );

	/**
	 * Gets information about whether permissions were generated yet.
	 * @param WC_Order $order
	 * @return bool
	 */
	public function get_download_permissions_granted( $order );

	/**
	 * Stores information about whether permissions were generated yet.
	 * @param WC_Order $order
	 * @param bool $set
	 */
	public function set_download_permissions_granted( $order, $set );

	/**
	 * Gets information about whether sales were recorded.
	 * @param WC_Order $order
	 * @return bool
	 */
	public function get_recorded_sales( $order );

	/**
	 * Stores information about whether sales were recorded.
	 * @param WC_Order $order
	 * @param bool $set
	 */
	public function set_recorded_sales( $order, $set );

	/**
	 * Gets information about whether coupon counts were updated.
	 * @param WC_Order $order
	 * @return bool
	 */
	public function get_recorded_coupon_usage_counts( $order );

	/**
	 * Stores information about whether coupon counts were updated.
	 * @param WC_Order $order
	 * @param bool $set
	 */
	public function set_recorded_coupon_usage_counts( $order, $set );
}
